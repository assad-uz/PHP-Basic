Syntax: 

CREATE TRIGGER trigger_name
{BEFORE | AFTER} {INSERT | UPDATE | DELETE}
ON table_name
FOR EACH ROW
BEGIN
    -- trigger body (multiple SQL statements- ржПржЦрж╛ржирзЗржЗ SQL INSERT | UPDATE | DELETE Syntax ржмрж╕ржмрзЗ)
END;

-------------------------------
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

    ржЕржВрж╢	                                               ржЕрж░рзНрже
trigger_name                                        ржЯрзНрж░рж┐ржЧрж╛рж░рзЗрж░ ржирж╛ржо
BEFORE ржмрж╛ AFTER	ржХржЦржи trigger ржЪрж▓ржмрзЗ         INSERT/UPDATE/DELETE ржПрж░ ржЖржЧрзЗ ржирж╛ ржкрж░рзЗ
INSERT/UPDATE/DELETE                    	ржХрзЛржи event ржШржЯрж▓рзЗ trigger ржЪрж╛рж▓рзБ рж╣ржмрзЗ
table_name	                               ржХрзЛржи ржЯрзЗржмрж┐рж▓рзЗрж░ ржЬржирзНржп trigger рждрзИрж░рж┐ рж╣ржмрзЗ
FOR EACH ROW                            	ржкрзНрж░рждрж┐ржЯрж┐ row-ржПрж░ ржЬржирзНржп trigger ржЪрж╛рж▓рзБ рж╣ржмрзЗ
BEGIN ... END	                        trigger body ржпрзЗржЦрж╛ржирзЗ SQL command ржерж╛ржХржмрзЗ


--------------------------------
ЁЯФБ OLD ржПржмржВ NEW ржХрзА?
Trigger ржПрж░ ржнрж┐рждрж░рзЗ рждрзБржорж┐ OLD ржПржмржВ NEW ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржбрзЗржЯрж╛ access ржХрж░рждрзЗ ржкрж╛рж░рзЛ:

Trigger Type	                        OLD.column              	NEW.column
BEFORE INSERT / AFTER INSERT	        тЭМ ржирзЗржЗ	            тЬЕ ржирждрзБржи ржЗржирж╕рж╛рж░рзНржЯ рж╣ржУрзЯрж╛ ржорж╛ржи
BEFORE UPDATE / AFTER UPDATE	       тЬЕ ржкрзБрж░рж╛ржирзЛ ржорж╛ржи               тЬЕ ржирждрзБржи ржорж╛ржи
BEFORE DELETE / AFTER DELETE	    тЬЕ ржбрж┐рж▓рж┐ржЯ рж╣ржУрзЯрж╛ рж░рзЗржХрж░рзНржб	            тЭМ ржирзЗржЗ


--------------------------------
ЁЯФТ Trigger тАФ ржПржХ ржзрж░ржирзЗрж░ auto-executed logic block
Trigger ржХрзЗржмрж▓ржорж╛рждрзНрж░ ржирж┐ржЪрзЗрж░ ржХрж╛ржЬржЧрзБрж▓рзЛрж░ рж╕ржорзЯ рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ execute рж╣рзЯ:

INSERT

UPDATE

DELETE

ЁЯСЙ рждрзБржорж┐ trigger ржХрзЗ CALL trigger_name(); ржПрж░ ржорждрзЛ ржХрж░рзЗ рж╕рж░рж╛рж╕рж░рж┐ ржЪрж╛рж▓рж╛рждрзЗ ржкрж╛рж░рзЛ ржирж╛ред

тЬЕ рждрж╛рж╣рж▓рзЗ ржХрж┐ржнрж╛ржмрзЗ Trigger "ржмрзНржпржмрж╣рж╛рж░" ржХрж░ржмрзЛ?

ЁЯФ╣ Step 1: ржкрзНрж░ржержорзЗ Trigger рждрзИрж░рж┐ ржХрж░рзЛ

CREATE TRIGGER after_insert_log
AFTER INSERT ON product
FOR EACH ROW
BEGIN
    INSERT INTO product_log(product_id, name, created_at)
    VALUES (NEW.id, NEW.name, NOW());
END;

ЁЯФ╣ Step 2: ржПржЦржи ржпрзЗржХрзЛржирзЛ INSERT ржХрж░рж▓рзЗржЗ Trigger ржирж┐ржЬрзЗ ржЪрж╛рж▓рзБ рж╣ржмрзЗ

INSERT INTO product(name, price)
VALUES ('Mouse', 500);
тЮбя╕П ржЙржкрж░рзЗрж░ query ржЪрж╛рж▓рж╛рж▓рзЗ product_log ржЯрзЗржмрж┐рж▓рзЗ ржЕржЯрзЛ-рж▓ржЧ рж╣рзЯрзЗ ржпрж╛ржмрзЗ тАФ ржХрж╛рж░ржг trigger ржХрж╛ржЬ ржХрж░рзЗржЫрзЗред


ЁЯЪл ржХрзЗржи Trigger ржХрзЗ CALL ржжрж┐рзЯрзЗ ржЪрж╛рж▓рж╛ржирзЛ ржпрж╛рзЯ ржирж╛?
ржХрж╛рж░ржг trigger:

- ржХрзЛржирзЛ ржЖрж▓рж╛ржжрж╛ "function" ржирж╛

- ржХрзЛржирзЛ ржирж╛ржо ржжрж┐рзЯрзЗ EXECUTE ржмрж╛ CALL ржХрж░рж╛ ржпрж╛рзЯ ржирж╛

- ржПржЯрж╛ table-ржПрж░ event ржПрж░ рж╕рж╛ржерзЗ bind ржХрж░рж╛


------------------------------------------
тЬЕ MySQL AFTER DELETE Trigger (рждрзЛржорж╛рж░ ржЪрж╛ржУрзЯрж╛ ржЕржирзБржпрж╛рзЯрзА):

CREATE TRIGGER after_delete_manufacturer
AFTER DELETE ON manufacturer
FOR EACH ROW
BEGIN
    DELETE FROM product
    WHERE manufacture_id = OLD.id;
END;

ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:
- AFTER DELETE ON manufacturer: ржпржЦржиржЗ ржХрзЛржирзЛ manufacturer ржбрж┐рж▓рж┐ржЯ рж╣ржмрзЗ

OLD.id: ржбрж┐рж▓рж┐ржЯ рж╣ржУрзЯрж╛ рж░рзЗржХрж░рзНржбрзЗрж░ manufacturer-ржПрж░ ID

DELETE FROM product ...: рж╕рзЗржЗ manufacturer_id-ржПрж░ рж╕рж╛ржерзЗ рж╕ржорзНржкрж░рзНржХржпрзБржХрзНржд рж╕ржм ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржорзБржЫрзЗ ржлрзЗрж▓ржмрзЗ

тЪая╕П ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рж╢рж░рзНржд:
ржПржЗ trigger ржЪрж▓ржмрзЗ рждржЦржиржЗ ржпржЦржи:

manufacturer.id ржПржмржВ product.manufacture_id ржПрж░ ржоржзрзНржпрзЗ рж╕ржорзНржкрж░рзНржХ (foreign key) ржерж╛ржХрзЗ ржмрж╛ manually ржорзНржпрж╛ржирзЗржЬ ржХрж░рж╛ рж╣рзЯ